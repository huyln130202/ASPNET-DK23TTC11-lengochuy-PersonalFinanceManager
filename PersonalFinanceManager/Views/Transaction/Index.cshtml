@model IEnumerable<PersonalFinanceManager.Models.Transaction>

@{
    ViewData["Title"] = "Danh Sách Giao Dịch";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Danh Sách Giao Dịch</h2>
        <a asp-action="Create" class="btn btn-primary">Thêm Giao Dịch Mới</a>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4>Thống Kê Thu/Chi Theo Tháng</h4>
                </div>
                <div class="card-body">
                    <canvas id="monthlyChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
    <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                <tr>
                            <th>Ngày</th>
                            <th>Loại</th>
                            <th>Danh Mục</th>
                            <th>Số Tiền</th>
                            <th>Mô Tả</th>
                            <th>Ví</th>
                            <th>Thao Tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                                <td>@item.TransactionDate.ToString("dd/MM/yyyy")</td>
                                <td>@(item.Type == "Income" ? "Thu" : "Chi")</td>
                        <td>@item.Category</td>
                        <td class="@(item.Type == "Income" ? "text-success" : "text-danger")">
                                    @(item.Type == "Income" ? "+" : "-")@item.Amount.ToString("#,##0")
                        </td>
                        <td>@item.Description</td>
                        <td>@item.Wallet.Name</td>
                        <td>
                                    <div class="btn-group">
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Sửa</a>
                                        <button type="button" class="btn btn-sm btn-danger" onclick="confirmDelete(@item.Id)">Xóa</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
    </div>
</div>

<form id="deleteForm" asp-action="Delete" method="post">
    <input type="hidden" id="deleteId" name="id" />
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Xử lý xóa giao dịch
        function confirmDelete(id) {
            if (confirm('Bạn có chắc chắn muốn xóa giao dịch này?')) {
                document.getElementById('deleteId').value = id;
                document.getElementById('deleteForm').submit();
            }
        }

        // Vẽ biểu đồ thống kê
        const ctx = document.getElementById('monthlyChart').getContext('2d');
        const monthlyStats = @Html.Raw(Json.Serialize(ViewBag.MonthlyStats));
        
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: monthlyStats.map(stat => stat.monthName),
                datasets: [
                    {
                        label: 'Thu',
                        data: monthlyStats.map(stat => stat.income),
                        backgroundColor: 'rgba(40, 167, 69, 0.5)',
                        borderColor: 'rgb(40, 167, 69)',
                        borderWidth: 1
                    },
                    {
                        label: 'Chi',
                        data: monthlyStats.map(stat => stat.expense),
                        backgroundColor: 'rgba(220, 53, 69, 0.5)',
                        borderColor: 'rgb(220, 53, 69)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString('vi-VN') + ' đ';
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += context.parsed.y.toLocaleString('vi-VN') + ' đ';
                                }
                                return label;
            }
        }
                    }
                }
            }
        });
    </script>
} 